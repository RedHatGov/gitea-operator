---
# tasks file for Gitea
- name: Set OpenShift Objects for Gitea to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - service_account.yml.j2
  - service.yml.j2
  - deployment.yml.j2

- name: Set PersistentVolumeClaim for Gitea to {{ _gitea_state }}
  when: _gitea_persistent|bool
  k8s:
    state: "{{ _gitea_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'persistent_volume_claim.yml.j2') | from_yaml }}"

- name: Set Gitea {{ _gitea_expose_method }} to {{ _gitea_state }}
  when: _gitea_expose_method != 'None'
  k8s:
    state: "{{ _gitea_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', _gitea_expose_method + '.yml.j2') | from_yaml }}"

- name: Get Gitea Route Hostname
  when:
  - _gitea_state == "present"
  - _gitea_expose_method == "Route"
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: r_route
  until:
    - (r_route.resources|length) > 0
    - r_route.resources[0].spec.host is defined
    - r_route.resources[0].spec.host|length > 0

- name: Store Gitea Route Hostname
  when:
  - _gitea_state == "present"
  - _gitea_expose_method == "Route"
  set_fact:
    _gitea_actual_route: "{{ r_route.resources[0].spec.host }}"

- name: Set Route dependant OpenShift Objects for Gitea to {{ _gitea_state }}
  k8s:
    state: "{{ _gitea_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - config_map.yml.j2

- name: Wait until application is available
  when:
    - _gitea_state == "present"
    - _gitea_wait_for_init|bool
  k8s_facts:
    api_version: apps/v1
    kind: Deployment
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: r_deployment
  until:
  - r_deployment.resources[0].status.availableReplicas is defined
  - r_deployment.resources[0].status.availableReplicas == 1
  retries: 50
  delay: 10
  ignore_errors: yes
